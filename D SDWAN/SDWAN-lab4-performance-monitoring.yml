---
- name: SDWAN Lab 4 - Network Performance and Statistics Monitoring
  hosts: localhost
  gather_facts: no
  vars_files:
    - vars.yml

  tasks:
    - name: Authenticate with vManage
      uri:
        url: "{{ vmanage_url }}/j_security_check"
        method: POST
        body: "j_username={{ vmanage_username }}&j_password={{ vmanage_password }}"
        validate_certs: false
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      register: login_response

    - name: Set session cookie
      set_fact:
        vmanage_cookie: "{{ login_response.cookies_string }}"

    - name: Get CSRF token
      uri:
        url: "{{ vmanage_url }}/dataservice/client/token"
        method: GET
        validate_certs: false
        return_content: yes
        headers:
          Cookie: "{{ vmanage_cookie }}"
      register: token_response

    - name: Set CSRF token
      set_fact:
        csrf_token: "{{ token_response.content }}"

    - name: Get all devices
      uri:
        url: "{{ vmanage_url }}/dataservice/device"
        method: GET
        validate_certs: false
        return_content: yes
        headers:
          Cookie: "{{ vmanage_cookie }}"
          X-XSRF-TOKEN: "{{ csrf_token }}"
      register: all_devices_raw

    - name: Parse device list
      set_fact:
        all_devices: "{{ all_devices_raw.json }}"

    - name: Get interface stats
      uri:
        url: "{{ vmanage_url }}/dataservice/device/interface/stats?deviceId={{ item['system-ip'] }}"
        method: GET
        validate_certs: false
        return_content: yes
        headers:
          Cookie: "{{ vmanage_cookie }}"
          X-XSRF-TOKEN: "{{ csrf_token }}"
      loop: "{{ all_devices.data }}"
      register: interface_stats_raw
      when: item['system-ip'] is defined
      ignore_errors: yes

    - name: Aggregate interface stats
      set_fact:
        interface_stats: "{{ interface_stats | default([]) + (item.json.data | default([])) }}"
      loop: "{{ interface_stats_raw.results }}"
      when: item.failed is not defined or not item.failed

    - name: Create a list of interfaces with stats
      set_fact:
        interfaces_with_stats: "{{ interfaces_with_stats | default([]) + [{'ifname': item.ifname, 'rx_kbps': item['rx-kbps'] | float, 'tx_kbps': item['tx-kbps'] | float}] }}"
      loop: "{{ interface_stats }}"
      when: item['rx-kbps'] is defined and item['tx-kbps'] is defined

    - name: Analyze and display performance metrics
      block:
        - name: Analyze interface performance
          set_fact:
            total_interfaces: "{{ interface_stats | length }}"
            high_rx_interfaces: "{{ interfaces_with_stats | selectattr('rx_kbps', 'greaterthan', 10000) | list }}"
            high_tx_interfaces: "{{ interfaces_with_stats | selectattr('tx_kbps', 'greaterthan', 10000) | list }}"
            avg_rx_kbps: "{{ (interfaces_with_stats | map(attribute='rx_kbps') | sum / interfaces_with_stats | length) | round(2) if interfaces_with_stats | length > 0 else 0 }}"
            avg_tx_kbps: "{{ (interfaces_with_stats | map(attribute='tx_kbps') | sum / interfaces_with_stats | length) | round(2) if interfaces_with_stats | length > 0 else 0 }}"

        - name: Display interface performance summary
          debug:
            msg: |
              === INTERFACE PERFORMANCE SUMMARY ===
              Total Interfaces Monitored: {{ total_interfaces | default('N/A') }}
              Average Rx Throughput: {{ avg_rx_kbps | default('N/A') }} Kbps
              Average Tx Throughput: {{ avg_tx_kbps | default('N/A') }} Kbps
              Interfaces with >10000 Kbps Rx: {{ high_rx_interfaces | default([]) | length }}
              Interfaces with >10000 Kbps Tx: {{ high_tx_interfaces | default([]) | length }}
      rescue:
        - name: Handle potential errors
          debug:
            msg: "Could not analyze performance metrics. The API may have returned no data."
