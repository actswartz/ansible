---
# This playbook performs interface state toggling on a Cisco CSR1000V router
# If an interface is UP, it will be shut down. If an interface is DOWN, it will be enabled.
# WARNING: This will change interface states - use with caution in production!

- name: Toggle CSR1000V Interface States (Up->Down, Down->Up)
  hosts: csr                    # Target the 'csr' group from inventory
  gather_facts: no              # Skip system fact gathering
  connection: network_cli       # Use CLI connection for network devices

  tasks:
    # Task 1: Get the current status of all interfaces
    - name: Get current interface status
      cisco.ios.ios_command:     # Run show command to get interface states
        commands:
          - show interfaces      # This shows detailed status of all interfaces
      register: interface_status # Store the output in a variable

    # Task 2: Analyze the interface output to separate UP and DOWN interfaces
    - name: Parse interface states
      set_fact:                  # Create variables with lists of interfaces by state
        # Find interfaces that are fully operational (up/up)
        interfaces_up: "{{ interface_status.stdout[0] | regex_findall('(\\S+) is up, line protocol is up') | flatten }}"
        # Find interfaces that are administratively shut down
        interfaces_down: "{{ interface_status.stdout[0] | regex_findall('(\\S+) is administratively down') | flatten }}"

    # Task 3: Show what interfaces are currently in each state
    - name: Display current interface states
      debug:                     # Display current state before making changes
        msg: |
          === CURRENT INTERFACE STATES ===
          Interfaces UP: {{ interfaces_up | join(', ') if interfaces_up else 'None' }}
          Interfaces DOWN (admin): {{ interfaces_down | join(', ') if interfaces_down else 'None' }}

    # Task 4: Shutdown all interfaces that are currently UP
    - name: Shutdown interfaces that are currently UP
      cisco.ios.ios_config:      # Use config module to make configuration changes
        lines:                   # The configuration commands to apply
          - shutdown             # This command shuts down an interface
        parents: "interface {{ item }}"  # Apply the command under each interface
      loop: "{{ interfaces_up }}" # Loop through each UP interface
      when:                      # Only run this task if these conditions are met:
        - interfaces_up is defined        # Make sure the variable exists
        - interfaces_up | length > 0     # Make sure there are interfaces to process
        - item != "Loopback0"            # Skip Loopback0 to avoid losing connectivity
      register: shutdown_results  # Store results for reference

    # Task 5: Enable all interfaces that are currently DOWN (administratively down)
    - name: Enable interfaces that are currently DOWN (administratively down)
      cisco.ios.ios_config:      # Use config module to make configuration changes
        lines:
          - no shutdown          # This command enables an interface
        parents: "interface {{ item }}"  # Apply under each interface context
      loop: "{{ interfaces_down }}" # Loop through each DOWN interface
      when:                      # Only run if:
        - interfaces_down is defined     # Variable exists
        - interfaces_down | length > 0  # There are interfaces to process
      register: enable_results    # Store results

    # Task 6: Report which interfaces were shut down
    - name: Display shutdown actions
      debug:                     # Print what was shut down
        msg: "SHUTDOWN: Interface {{ item }} has been shut down"
      loop: "{{ interfaces_up }}" # Show each interface that was shut down
      when:                      # Same conditions as the shutdown task
        - interfaces_up is defined
        - interfaces_up | length > 0
        - item != "Loopback0"

    # Task 7: Report which interfaces were enabled
    - name: Display enable actions  
      debug:                     # Print what was enabled
        msg: "ENABLED: Interface {{ item }} has been enabled (no shutdown)"
      loop: "{{ interfaces_down }}" # Show each interface that was enabled
      when:
        - interfaces_down is defined
        - interfaces_down | length > 0

    # Task 8: Wait for changes to take effect
    - name: Wait for interface state changes to take effect
      pause:                     # Pause execution for a specified time
        seconds: 5               # Wait 5 seconds for interface states to stabilize

    # Task 9: Check the final state after all changes
    - name: Verify new interface states
      cisco.ios.ios_command:     # Run command to see final states
        commands:
          - show ip interface brief  # Quick summary of all interface states
      register: final_status     # Store the final status

    # Task 10: Display the final interface status after all changes
    - name: Display final interface status
      debug:                     # Show the results of our changes
        msg: |
          === FINAL INTERFACE STATUS ===
          {{ final_status.stdout[0] }}   # Display complete final status